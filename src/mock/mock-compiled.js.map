{"version":3,"sources":["mock.js"],"names":[],"mappings":"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","file":"mock-compiled.js","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { LoginUsers, Users } from './data/user';\nlet _Users = Users;\n\nexport default {\n  /**\n   * mock bootstrap\n   */\n  bootstrap() {\n   let mock = new MockAdapter(axios);\n\n    mock.restore();//关闭mock模拟数据\n\n    // mock success request\n    mock.onGet('/success').reply(200, {\n      msg: 'success'\n    });\n\n    // mock error request\n    mock.onGet('/error').reply(500, {\n      msg: 'failure'\n    });\n\n    //登录\n    mock.onPost('/login').reply(config => {\n      let {username, password} = JSON.parse(config.data);\n      return new Promise((resolve, reject) => {\n        let user = null;\n        setTimeout(() => {\n          let hasUser = LoginUsers.some(u => {\n            if (u.username === username && u.password === password) {\n              user = JSON.parse(JSON.stringify(u));\n              user.password = undefined;\n              return true;\n            }\n          });\n\n          if (hasUser) {\n            resolve([200, { code: 200, msg: '请求成功', user }]);\n          } else {\n            resolve([200, { code: 500, msg: '账号或密码错误' }]);\n          }\n        }, 1000);\n      });\n    });\n\n    //获取用户列表\n    mock.onGet('/user/list').reply(config => {\n      let {name} = config.params;\n      let mockUsers = _Users.filter(user => {\n        if (name && user.name.indexOf(name) == -1) return false;\n        return true;\n      });\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve([200, {\n            users: mockUsers\n          }]);\n        }, 1000);\n      });\n    });\n\n    //获取用户列表（分页）\n    mock.onGet('/user/listpage').reply(config => {\n      let {page, name} = config.params;\n      let mockUsers = _Users.filter(user => {\n        if (name && user.name.indexOf(name) == -1) return false;\n        return true;\n      });\n      let total = mockUsers.length;\n      mockUsers = mockUsers.filter((u, index) => index < 15 * page && index >= 15 * (page - 1));\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve([200, {\n            total: total,\n            users: mockUsers\n          }]);\n        }, 1000);\n      });\n    });\n\n    //删除用户\n    mock.onGet('/user/remove').reply(config => {\n      let { id } = config.params;\n      _Users = _Users.filter(u => u.id !== id);\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve([200, {\n            code: 200,\n            msg: '删除成功'\n          }]);\n        }, 500);\n      });\n    });\n\n    //批量删除用户\n    mock.onGet('/user/batchremove').reply(config => {\n      let { ids } = config.params;\n      ids = ids.split(',');\n      _Users = _Users.filter(u => !ids.includes(u.id));\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve([200, {\n            code: 200,\n            msg: '删除成功'\n          }]);\n        }, 500);\n      });\n    });\n\n    //编辑用户\n    mock.onGet('/user/edit').reply(config => {\n      let { id, name, addr, age, birth, sex } = config.params;\n      _Users.some(u => {\n        if (u.id === id) {\n          u.name = name;\n          u.addr = addr;\n          u.age = age;\n          u.birth = birth;\n          u.sex = sex;\n          return true;\n        }\n      });\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve([200, {\n            code: 200,\n            msg: '编辑成功'\n          }]);\n        }, 500);\n      });\n    });\n\n    //新增用户\n    mock.onGet('/user/add').reply(config => {\n      let { name, addr, age, birth, sex } = config.params;\n      _Users.push({\n        name: name,\n        addr: addr,\n        age: age,\n        birth: birth,\n        sex: sex\n      });\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve([200, {\n            code: 200,\n            msg: '新增成功'\n          }]);\n        }, 500);\n      });\n    });\n\n\n  }\n};"]}